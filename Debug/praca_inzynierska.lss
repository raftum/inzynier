
praca_inzynierska.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000054a  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800102  00800102  000005e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd0  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa2  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008eb  00000000  00000000  000021ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00002d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000558  00000000  00000000  000032c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	7d c0       	rjmp	.+250    	; 0x11c <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	83 c0       	rjmp	.+262    	; 0x132 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e4       	ldi	r30, 0x4A	; 74
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	af 31       	cpi	r26, 0x1F	; 31
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	6e c2       	rjmp	.+1244   	; 0x546 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2f 97       	sbiw	r28, 0x0f	; 15
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	message msg;
	msg.status = 0;
	uint16_t OCR1B_val = 0;
	
	USART_Init(BAUD_PRESCALE);
  80:	81 e8       	ldi	r24, 0x81	; 129
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	55 d1       	rcall	.+682    	; 0x330 <USART_Init>
	//LCD_Initalize();
	
    PWM_init();
  86:	08 d1       	rcall	.+528    	; 0x298 <PWM_init>
	ADC_init();
  88:	80 d0       	rcall	.+256    	; 0x18a <ADC_init>
    ADC_start();
  8a:	a2 d0       	rcall	.+324    	; 0x1d0 <ADC_start>
	//BUTTON_Init();
    TIMER0_init();
  8c:	47 d1       	rcall	.+654    	; 0x31c <TIMER0_init>
	//PWM_select_mode(0);
	//PWM_ICR();
	//Timer0_stop();
sei(); // wlaczenie globalnych przerwan
  8e:	78 94       	sei
#define BAUD_PRESCALE (((Prescaler/(USART_BAUDRATE * 16UL))) - 1)
volatile char bufor[5];
//volatile int timerCount = 0;

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  90:	87 ec       	ldi	r24, 0xC7	; 199
  92:	c8 2e       	mov	r12, r24
  94:	d1 2c       	mov	r13, r1
  96:	e1 2c       	mov	r14, r1
  98:	f1 2c       	mov	r15, r1
	//Timer0_stop();
sei(); // wlaczenie globalnych przerwan
	
	while (1) //P?tla g?ówna
	{
	   		msg = USART_MessageManager();
  9a:	5e d1       	rcall	.+700    	; 0x358 <USART_MessageManager>
			   
	   		if (msg.status)
  9c:	77 23       	and	r23, r23
  9e:	e9 f3       	breq	.-6      	; 0x9a <main+0x2e>
		   		char temp3[4];	
				   			
		   		OCR1B_val = 0;
		   		//LCD_GoTo(12,0);
		   		//LCD_Clear();
		   		switch (msg.len)
  a0:	23 30       	cpi	r18, 0x03	; 3
  a2:	59 f0       	breq	.+22     	; 0xba <main+0x4e>
  a4:	24 30       	cpi	r18, 0x04	; 4
  a6:	a1 f0       	breq	.+40     	; 0xd0 <main+0x64>
  a8:	22 30       	cpi	r18, 0x02	; 2
  aa:	e9 f4       	brne	.+58     	; 0xe6 <main+0x7a>
		   		{			   		
					case(2):

			   		//LCD_WriteData(msg.buffer[0]);
			   			temp1[0] = msg.buffer[0]; 
  ac:	3e 87       	std	Y+14, r19	; 0x0e
						temp1[1] = '\0';
  ae:	1f 86       	std	Y+15, r1	; 0x0f
			   			_mode = msg.buffer[1]; // mode			   			
  b0:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end>
			   			OCR1B_val = (uint8_t)atoi(temp1);
  b4:	ce 01       	movw	r24, r28
  b6:	0e 96       	adiw	r24, 0x0e	; 14
  b8:	07 c0       	rjmp	.+14     	; 0xc8 <main+0x5c>

			   		break;
			   		
			   		case(3):
			   		//LCD_WriteData(msg.buffer[0]);LCD_WriteData(msg.buffer[1]);
			   			temp2[0] = msg.buffer[0]; 
  ba:	3b 87       	std	Y+11, r19	; 0x0b
						temp2[1] = msg.buffer[1];
  bc:	4c 87       	std	Y+12, r20	; 0x0c
						temp2[2] = '\0';
  be:	1d 86       	std	Y+13, r1	; 0x0d
						_mode = msg.buffer[2]; //mode
  c0:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <__data_end>
						OCR1B_val = (uint8_t)atoi(temp2);	
  c4:	ce 01       	movw	r24, r28
  c6:	0b 96       	adiw	r24, 0x0b	; 11
  c8:	19 d2       	rcall	.+1074   	; 0x4fc <atoi>
  ca:	8c 01       	movw	r16, r24
  cc:	11 27       	eor	r17, r17
			   	 
			   		break;
  ce:	0d c0       	rjmp	.+26     	; 0xea <main+0x7e>
			   		
			   		case(4):
			   		//LCD_WriteData(msg.buffer[0]);LCD_WriteData(msg.buffer[1]);LCD_WriteData(msg.buffer[2]);
			   			temp3[0] = msg.buffer[0]; 
  d0:	3f 83       	std	Y+7, r19	; 0x07
						temp3[1] = msg.buffer[1];
  d2:	48 87       	std	Y+8, r20	; 0x08
						temp3[2] = msg.buffer[2];
  d4:	59 87       	std	Y+9, r21	; 0x09
						temp3[3] = '\0';
  d6:	1a 86       	std	Y+10, r1	; 0x0a
						_mode = msg.buffer[3]; //mode
  d8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
						OCR1B_val = (uint16_t)atoi(temp3);
  dc:	ce 01       	movw	r24, r28
  de:	07 96       	adiw	r24, 0x07	; 7
  e0:	0d d2       	rcall	.+1050   	; 0x4fc <atoi>
  e2:	8c 01       	movw	r16, r24
    
			   		break;
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x7e>
	   		{
		   		char temp1[2];
		   		char temp2[3];
		   		char temp3[4];	
				   			
		   		OCR1B_val = 0;
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	10 e0       	ldi	r17, 0x00	; 0
						OCR1B_val = (uint16_t)atoi(temp3);
    
			   		break;
		   		}				   
				
				if(_mode == '1') //40khz
  ea:	b0 90 02 01 	lds	r11, 0x0102	; 0x800102 <__data_end>
  ee:	81 e3       	ldi	r24, 0x31	; 49
  f0:	b8 12       	cpse	r11, r24
  f2:	04 c0       	rjmp	.+8      	; 0xfc <main+0x90>
#define BAUD_PRESCALE (((Prescaler/(USART_BAUDRATE * 16UL))) - 1)
volatile char bufor[5];
//volatile int timerCount = 0;

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  f4:	98 01       	movw	r18, r16
  f6:	a4 ef       	ldi	r26, 0xF4	; 244
  f8:	b1 e0       	ldi	r27, 0x01	; 1
  fa:	06 c0       	rjmp	.+12     	; 0x108 <main+0x9c>
				
				if(_mode == '1') //40khz
				{
					OCR1B_val = map(OCR1B_val, 0, 199, 0, 500);
				}
				if(_mode == '2') //10khz
  fc:	82 e3       	ldi	r24, 0x32	; 50
  fe:	b8 12       	cpse	r11, r24
 100:	08 c0       	rjmp	.+16     	; 0x112 <main+0xa6>
#define BAUD_PRESCALE (((Prescaler/(USART_BAUDRATE * 16UL))) - 1)
volatile char bufor[5];
//volatile int timerCount = 0;

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 102:	98 01       	movw	r18, r16
 104:	a0 ed       	ldi	r26, 0xD0	; 208
 106:	b7 e0       	ldi	r27, 0x07	; 7
 108:	cb d1       	rcall	.+918    	; 0x4a0 <__umulhisi3>
 10a:	a7 01       	movw	r20, r14
 10c:	96 01       	movw	r18, r12
 10e:	ac d1       	rcall	.+856    	; 0x468 <__divmodsi4>
				{
					OCR1B_val = map(OCR1B_val, 0, 199, 0, 500);
				}
				if(_mode == '2') //10khz
				{
					OCR1B_val = map(OCR1B_val, 0, 199, 0, 2000);
 110:	89 01       	movw	r16, r18
				}
				
				PWM_select_mode(_mode);
 112:	8b 2d       	mov	r24, r11
 114:	e9 d0       	rcall	.+466    	; 0x2e8 <PWM_select_mode>
		   		PWM_UpdateOCR1B(OCR1B_val);			  
 116:	c8 01       	movw	r24, r16
 118:	d9 d0       	rcall	.+434    	; 0x2cc <PWM_UpdateOCR1B>
 11a:	bf cf       	rjmp	.-130    	; 0x9a <main+0x2e>

0000011c <__vector_16>:
		  
	} 
}

ISR(TIMER0_OVF_vect)//przerwanie przepe?nienie timer0
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
	
	TCNT0 = 0;  //Pocz?tkowa warto?? licznika
 126:	16 bc       	out	0x26, r1	; 38
}
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_21>:
ISR(ADC_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	//LCD_GoTo(10,0);
	//LCD_WriteText("test");
	ADC_select_channel();
 154:	43 d0       	rcall	.+134    	; 0x1dc <ADC_select_channel>
	 if(converter->adc_ready_flag == 1)
 156:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 15a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	85 81       	ldd	r24, Z+5	; 0x05
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f4       	brne	.+2      	; 0x166 <__vector_21+0x34>
	 {
		 converter->adc_ready_flag = 0;
 164:	15 82       	std	Z+5, r1	; 0x05
		//pwm_algorithm();
	 }
	
	ADC_start();
 166:	34 d0       	rcall	.+104    	; 0x1d0 <ADC_start>
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <ADC_init>:
struct str_ADC_measure obADC_measure; 
struct str_ADC_measure *converter = &obADC_measure;

void ADC_init()
{
	converter->adc_switch = ADC2;
 18a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 18e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	84 83       	std	Z+4, r24	; 0x04
	
	//DDRC |= (1<<PC3) | (1<<PC2);
    ADCSRA |= (1<<ADEN); //ustawienie tego bitu na 1 w?cza przetwornik ADC mikrokontrolera.
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	80 83       	st	Z, r24

	ADCSRA |=/* (1<<ADATE)|*/(1<<ADIF)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1); // tryb ciaglej konwercji free run oraz ustawienie preskalera =32
 1a0:	80 81       	ld	r24, Z
 1a2:	8e 61       	ori	r24, 0x1E	; 30
 1a4:	80 83       	st	Z, r24

	ADMUX |= (1<<REFS0) | (1<<ADLAR) | (converter->adc_switch);
 1a6:	ec e7       	ldi	r30, 0x7C	; 124
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	90 81       	ld	r25, Z
 1ac:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 1b0:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 1b4:	14 96       	adiw	r26, 0x04	; 4
 1b6:	8c 91       	ld	r24, X
 1b8:	89 2b       	or	r24, r25
 1ba:	80 66       	ori	r24, 0x60	; 96
 1bc:	80 83       	st	Z, r24
	//ADCSRB &= ~( (1 << ADTS2) | (1 << ADTS1) | (1 << ADTS0) );
	//ADCSRB = (1 << ADTS2);
	converter->raw_voltage_input = 0;
 1be:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1c2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	11 82       	std	Z+1, r1	; 0x01
 1c8:	10 82       	st	Z, r1
	converter->raw_voltage_output = 0;
 1ca:	13 82       	std	Z+3, r1	; 0x03
 1cc:	12 82       	std	Z+2, r1	; 0x02
 1ce:	08 95       	ret

000001d0 <ADC_start>:
}

void ADC_start()  //str 191 start konwersji
{
	ADCSRA |= (1<<ADSC);
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <ADC_select_channel>:
{
	static uint8_t counter = 0;
	static uint16_t sampleADC2 = 0;
	static uint16_t sampleADC3 = 0;
	
	if(counter < SAMPLES)
 1dc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter.1623>
 1e0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1e4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	a8 f5       	brcc	.+106    	; 0x256 <ADC_select_channel+0x7a>
	{	
		switch(converter->adc_switch)
 1ec:	94 81       	ldd	r25, Z+4	; 0x04
 1ee:	92 30       	cpi	r25, 0x02	; 2
 1f0:	a1 f0       	breq	.+40     	; 0x21a <ADC_select_channel+0x3e>
 1f2:	93 30       	cpi	r25, 0x03	; 3
 1f4:	01 f5       	brne	.+64     	; 0x236 <ADC_select_channel+0x5a>
				sampleADC2 += ADCH;     //odczytaj tylko starszy bajt pomiaru
				converter->adc_switch = ADC3;
				break;			
			case ADC3://gdy PC3
				//converter->adc_ready_flag = 0;
				sampleADC3 += ADCH;     //odczytaj tylko starszy bajt pomiaru
 1f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 1fa:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sampleADC3.1625>
 1fe:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <sampleADC3.1625+0x1>
 202:	29 0f       	add	r18, r25
 204:	31 1d       	adc	r19, r1
 206:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <sampleADC3.1625+0x1>
 20a:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <sampleADC3.1625>
				converter->adc_switch = ADC2;
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	94 83       	std	Z+4, r25	; 0x04
				counter++;
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <counter.1623>
				break;
 218:	0e c0       	rjmp	.+28     	; 0x236 <ADC_select_channel+0x5a>
	{	
		switch(converter->adc_switch)
		{
			case ADC2://gdy PC2
				//converter->adc_ready_flag = 0;
				sampleADC2 += ADCH;     //odczytaj tylko starszy bajt pomiaru
 21a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 21e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sampleADC2.1624>
 222:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <sampleADC2.1624+0x1>
 226:	82 0f       	add	r24, r18
 228:	91 1d       	adc	r25, r1
 22a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <sampleADC2.1624+0x1>
 22e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sampleADC2.1624>
				converter->adc_switch = ADC3;
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	84 83       	std	Z+4, r24	; 0x04
				sampleADC3 += ADCH;     //odczytaj tylko starszy bajt pomiaru
				converter->adc_switch = ADC2;
				counter++;
				break;
		}
		ADMUX &= ~(0x03);  //kasowanie converter->adc_switch
 236:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 23a:	8c 7f       	andi	r24, 0xFC	; 252
 23c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>

		ADMUX  |= (converter->adc_switch); //Ustawianie nowych warto?ci
 240:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 244:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 248:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 24c:	84 81       	ldd	r24, Z+4	; 0x04
 24e:	89 2b       	or	r24, r25
 250:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 254:	08 95       	ret
	}
	else
	{
		converter->raw_voltage_input = sampleADC2 / SAMPLES;
 256:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sampleADC2.1624>
 25a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <sampleADC2.1624+0x1>
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	91 83       	std	Z+1, r25	; 0x01
 268:	80 83       	st	Z, r24
		converter->raw_voltage_output = sampleADC3 / SAMPLES;
 26a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sampleADC3.1625>
 26e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sampleADC3.1625+0x1>
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	93 83       	std	Z+3, r25	; 0x03
 27c:	82 83       	std	Z+2, r24	; 0x02
		counter = 0;
 27e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <counter.1623>
		sampleADC2 = 0;
 282:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sampleADC2.1624+0x1>
 286:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sampleADC2.1624>
		sampleADC3 = 0;
 28a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sampleADC3.1625+0x1>
 28e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <sampleADC3.1625>
		converter->adc_ready_flag = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	85 83       	std	Z+5, r24	; 0x05
 296:	08 95       	ret

00000298 <PWM_init>:
	}
}

void PWM_UpdateOCR0B(uint8_t value)
{
	OCR0B = value;
 298:	22 9a       	sbi	0x04, 2	; 4
 29a:	2a 9a       	sbi	0x05, 2	; 5
 29c:	e0 e8       	ldi	r30, 0x80	; 128
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	83 63       	ori	r24, 0x33	; 51
 2a4:	80 83       	st	Z, r24
 2a6:	e1 e8       	ldi	r30, 0x81	; 129
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	88 61       	ori	r24, 0x18	; 24
 2ae:	80 83       	st	Z, r24
 2b0:	80 81       	ld	r24, Z
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	80 83       	st	Z, r24
 2b6:	87 ec       	ldi	r24, 0xC7	; 199
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 2be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 2c2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
 2c6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
 2ca:	08 95       	ret

000002cc <PWM_UpdateOCR1B>:
}

void PWM_UpdateOCR1B(uint16_t value)
{
	cli();
 2cc:	f8 94       	cli

	OCR1B = value;
 2ce:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
 2d2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
		
	sei();
 2d6:	78 94       	sei
 2d8:	08 95       	ret

000002da <PWM_UpdateOCR1A>:
}

void PWM_UpdateOCR1A(uint16_t value)
{
	cli();
 2da:	f8 94       	cli
	OCR1A = value;
 2dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 2e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	sei();
 2e4:	78 94       	sei
 2e6:	08 95       	ret

000002e8 <PWM_select_mode>:
	
	TCCR0B &=~((1<<CS10)|(1<<CS11)|(1<<CS12));//wylaczenie timera
	TCNT0 = 0;
}
void PWM_select_mode(uint8_t selector)
{
 2e8:	cf 93       	push	r28
 2ea:	c8 2f       	mov	r28, r24
	PWM_init();
 2ec:	d5 df       	rcall	.-86     	; 0x298 <PWM_init>
	int m = selector-48;
	//selector = 0;
	switch(m)
 2ee:	8c 2f       	mov	r24, r28
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	c0 97       	sbiw	r24, 0x30	; 48
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	91 05       	cpc	r25, r1
 2f8:	41 f0       	breq	.+16     	; 0x30a <PWM_select_mode+0x22>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	91 05       	cpc	r25, r1
 2fe:	41 f0       	breq	.+16     	; 0x310 <PWM_select_mode+0x28>
 300:	89 2b       	or	r24, r25
 302:	51 f4       	brne	.+20     	; 0x318 <PWM_select_mode+0x30>
	{
		case MODE_100KHZ: //100khz
			PWM_UpdateOCR1A(199);
 304:	87 ec       	ldi	r24, 0xC7	; 199
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	05 c0       	rjmp	.+10     	; 0x314 <PWM_select_mode+0x2c>
		break;
		
		case MODE_40KHZ: //40khz
			PWM_UpdateOCR1A(500);
 30a:	84 ef       	ldi	r24, 0xF4	; 244
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	02 c0       	rjmp	.+4      	; 0x314 <PWM_select_mode+0x2c>
		break;
		
		case MODE_1KHZ: //10khz
			PWM_UpdateOCR1A(2000);
 310:	80 ed       	ldi	r24, 0xD0	; 208
 312:	97 e0       	ldi	r25, 0x07	; 7
		break;
		default:
			;//do nothing
		break;
	}
}
 314:	cf 91       	pop	r28
		case MODE_40KHZ: //40khz
			PWM_UpdateOCR1A(500);
		break;
		
		case MODE_1KHZ: //10khz
			PWM_UpdateOCR1A(2000);
 316:	e1 cf       	rjmp	.-62     	; 0x2da <PWM_UpdateOCR1A>
		break;
		default:
			;//do nothing
		break;
	}
}
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <TIMER0_init>:
 */ 
#include "../inc/timer0.h"

void TIMER0_init()
{
	TCCR0B|=(1<<CS01);//taktowanie 8 mln preskaler 8, czyli 1 mlm
 31c:	85 b5       	in	r24, 0x25	; 37
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	85 bd       	out	0x25, r24	; 37
	TIMSK0|=(1<<TOIE0);
 322:	ee e6       	ldi	r30, 0x6E	; 110
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	80 83       	st	Z, r24
	TCNT0 = 0;
 32c:	16 bc       	out	0x26, r1	; 38
 32e:	08 95       	ret

00000330 <USART_Init>:
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
 330:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 334:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 338:	88 e1       	ldi	r24, 0x18	; 24
 33a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 33e:	8e e0       	ldi	r24, 0x0E	; 14
 340:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
 344:	08 95       	ret

00000346 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	//while (!(UCSR0A & (1<<RXC0)));	
	if(UCSR0A & (1<<RXC0))
 346:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 34a:	87 ff       	sbrs	r24, 7
 34c:	03 c0       	rjmp	.+6      	; 0x354 <USART_Receive+0xe>
	{
		return UDR0;
 34e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 352:	08 95       	ret
	}
		
	return Error;
 354:	8f ef       	ldi	r24, 0xFF	; 255
}
 356:	08 95       	ret

00000358 <USART_MessageManager>:

message USART_MessageManager()
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	00 d0       	rcall	.+0      	; 0x35e <USART_MessageManager+0x6>
 35e:	00 d0       	rcall	.+0      	; 0x360 <USART_MessageManager+0x8>
 360:	00 d0       	rcall	.+0      	; 0x362 <USART_MessageManager+0xa>
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
	static message dummyMessage;
	uint8_t datapart = 0;
	static uint8_t cnt = 0;
	static uint16_t noMessageCnt = 0;

	switch (state)
 366:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <state.1788>
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	c9 f0       	breq	.+50     	; 0x3a0 <USART_MessageManager+0x48>
 36e:	18 f0       	brcs	.+6      	; 0x376 <USART_MessageManager+0x1e>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	21 f1       	breq	.+72     	; 0x3bc <USART_MessageManager+0x64>
 374:	4a c0       	rjmp	.+148    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		case(USART_Init_State):
			ms.len = 0;
 376:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ms.1789>
			ms.buffer[0] = '0'; ms.buffer[1] = '0'; ms.buffer[2] = '0'; ms.buffer[3] = '0';
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ms.1789+0x1>
 380:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ms.1789+0x2>
 384:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ms.1789+0x3>
 388:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ms.1789+0x4>
			ms.status = USART_Message_NOK;
 38c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <ms.1789+0x5>
			cnt = 0;
 390:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt.1792>
			dummyMessage.len = 0;//informuje w main ze ramka/dane jeszcze nie przyszla
 394:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <dummyMessage.1790>

			state = USART_Get_Len_State;//przenosi do nowego stanu 
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state.1788>
			break;
 39e:	35 c0       	rjmp	.+106    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

		case(USART_Get_Len_State):

			ms.len = USART_Receive();
 3a0:	d2 df       	rcall	.-92     	; 0x346 <USART_Receive>
 3a2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ms.1789>
			if (ms.len != Error && ms.len != 0 && ms.len <= 4) //zabezpieczenie
 3a6:	81 50       	subi	r24, 0x01	; 1
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	30 f5       	brcc	.+76     	; 0x3f8 <USART_MessageManager+0xa0>
			{
				state = USART_Get_Data_State;
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state.1788>
				noMessageCnt = 0;
 3b2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <noMessageCnt.1793+0x1>
 3b6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <noMessageCnt.1793>
 3ba:	1e c0       	rjmp	.+60     	; 0x3f8 <USART_MessageManager+0xa0>
			}
			noMessageCnt++;
			break;

		case(USART_Get_Data_State):
			datapart = USART_Receive();
 3bc:	c4 df       	rcall	.-120    	; 0x346 <USART_Receive>
 3be:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <ms.1789>

			if (datapart != Error && cnt < ms.len)
 3c2:	8f 3f       	cpi	r24, 0xFF	; 255
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <USART_MessageManager+0x8e>
 3c6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <cnt.1792>
 3ca:	92 17       	cp	r25, r18
 3cc:	60 f4       	brcc	.+24     	; 0x3e6 <USART_MessageManager+0x8e>
			{
				ms.buffer[cnt] = datapart;
 3ce:	e9 2f       	mov	r30, r25
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	ef 5e       	subi	r30, 0xEF	; 239
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	81 83       	std	Z+1, r24	; 0x01
				cnt++;
 3d8:	9f 5f       	subi	r25, 0xFF	; 255
 3da:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <cnt.1792>
				noMessageCnt = 0;
 3de:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <noMessageCnt.1793+0x1>
 3e2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <noMessageCnt.1793>
			}
			if (cnt == ms.len)
 3e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt.1792>
 3ea:	28 13       	cpse	r18, r24
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <USART_MessageManager+0xa0>
			{
				ms.status = USART_Message_OK;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <ms.1789+0x5>
				state = USART_Init_State;
 3f4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <state.1788>
			}
			noMessageCnt++;
 3f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <noMessageCnt.1793>
 3fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <noMessageCnt.1793+0x1>
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <noMessageCnt.1793+0x1>
 406:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <noMessageCnt.1793>
			break;
	}

	if (noMessageCnt > USART_Message_Timeout)
 40a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <noMessageCnt.1793>
 40e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <noMessageCnt.1793+0x1>
 412:	81 31       	cpi	r24, 0x11	; 17
 414:	97 42       	sbci	r25, 0x27	; 39
 416:	30 f0       	brcs	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		state = USART_Init_State;
 418:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <state.1788>
		noMessageCnt = 0;
 41c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <noMessageCnt.1793+0x1>
 420:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <noMessageCnt.1793>
	}

	if (ms.status == USART_Message_OK)
 424:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <ms.1789+0x5>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	21 f4       	brne	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	{
		return ms;
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	e1 e1       	ldi	r30, 0x11	; 17
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	}
	else
	{
		return dummyMessage;
 434:	86 e0       	ldi	r24, 0x06	; 6
 436:	ea e0       	ldi	r30, 0x0A	; 10
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	de 01       	movw	r26, r28
 43c:	11 96       	adiw	r26, 0x01	; 1
 43e:	01 90       	ld	r0, Z+
 440:	0d 92       	st	X+, r0
 442:	8a 95       	dec	r24
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	29 81       	ldd	r18, Y+1	; 0x01
 448:	3a 81       	ldd	r19, Y+2	; 0x02
 44a:	4b 81       	ldd	r20, Y+3	; 0x03
 44c:	5c 81       	ldd	r21, Y+4	; 0x04
 44e:	6d 81       	ldd	r22, Y+5	; 0x05
 450:	7e 81       	ldd	r23, Y+6	; 0x06
	}
}
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	26 96       	adiw	r28, 0x06	; 6
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <__divmodsi4>:
 468:	05 2e       	mov	r0, r21
 46a:	97 fb       	bst	r25, 7
 46c:	16 f4       	brtc	.+4      	; 0x472 <__divmodsi4+0xa>
 46e:	00 94       	com	r0
 470:	0f d0       	rcall	.+30     	; 0x490 <__negsi2>
 472:	57 fd       	sbrc	r21, 7
 474:	05 d0       	rcall	.+10     	; 0x480 <__divmodsi4_neg2>
 476:	20 d0       	rcall	.+64     	; 0x4b8 <__udivmodsi4>
 478:	07 fc       	sbrc	r0, 7
 47a:	02 d0       	rcall	.+4      	; 0x480 <__divmodsi4_neg2>
 47c:	46 f4       	brtc	.+16     	; 0x48e <__divmodsi4_exit>
 47e:	08 c0       	rjmp	.+16     	; 0x490 <__negsi2>

00000480 <__divmodsi4_neg2>:
 480:	50 95       	com	r21
 482:	40 95       	com	r20
 484:	30 95       	com	r19
 486:	21 95       	neg	r18
 488:	3f 4f       	sbci	r19, 0xFF	; 255
 48a:	4f 4f       	sbci	r20, 0xFF	; 255
 48c:	5f 4f       	sbci	r21, 0xFF	; 255

0000048e <__divmodsi4_exit>:
 48e:	08 95       	ret

00000490 <__negsi2>:
 490:	90 95       	com	r25
 492:	80 95       	com	r24
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	08 95       	ret

000004a0 <__umulhisi3>:
 4a0:	a2 9f       	mul	r26, r18
 4a2:	b0 01       	movw	r22, r0
 4a4:	b3 9f       	mul	r27, r19
 4a6:	c0 01       	movw	r24, r0
 4a8:	a3 9f       	mul	r26, r19
 4aa:	01 d0       	rcall	.+2      	; 0x4ae <__umulhisi3+0xe>
 4ac:	b2 9f       	mul	r27, r18
 4ae:	70 0d       	add	r23, r0
 4b0:	81 1d       	adc	r24, r1
 4b2:	11 24       	eor	r1, r1
 4b4:	91 1d       	adc	r25, r1
 4b6:	08 95       	ret

000004b8 <__udivmodsi4>:
 4b8:	a1 e2       	ldi	r26, 0x21	; 33
 4ba:	1a 2e       	mov	r1, r26
 4bc:	aa 1b       	sub	r26, r26
 4be:	bb 1b       	sub	r27, r27
 4c0:	fd 01       	movw	r30, r26
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <__udivmodsi4_ep>

000004c4 <__udivmodsi4_loop>:
 4c4:	aa 1f       	adc	r26, r26
 4c6:	bb 1f       	adc	r27, r27
 4c8:	ee 1f       	adc	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	a2 17       	cp	r26, r18
 4ce:	b3 07       	cpc	r27, r19
 4d0:	e4 07       	cpc	r30, r20
 4d2:	f5 07       	cpc	r31, r21
 4d4:	20 f0       	brcs	.+8      	; 0x4de <__udivmodsi4_ep>
 4d6:	a2 1b       	sub	r26, r18
 4d8:	b3 0b       	sbc	r27, r19
 4da:	e4 0b       	sbc	r30, r20
 4dc:	f5 0b       	sbc	r31, r21

000004de <__udivmodsi4_ep>:
 4de:	66 1f       	adc	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	88 1f       	adc	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	1a 94       	dec	r1
 4e8:	69 f7       	brne	.-38     	; 0x4c4 <__udivmodsi4_loop>
 4ea:	60 95       	com	r22
 4ec:	70 95       	com	r23
 4ee:	80 95       	com	r24
 4f0:	90 95       	com	r25
 4f2:	9b 01       	movw	r18, r22
 4f4:	ac 01       	movw	r20, r24
 4f6:	bd 01       	movw	r22, r26
 4f8:	cf 01       	movw	r24, r30
 4fa:	08 95       	ret

000004fc <atoi>:
 4fc:	fc 01       	movw	r30, r24
 4fe:	88 27       	eor	r24, r24
 500:	99 27       	eor	r25, r25
 502:	e8 94       	clt
 504:	21 91       	ld	r18, Z+
 506:	20 32       	cpi	r18, 0x20	; 32
 508:	e9 f3       	breq	.-6      	; 0x504 <__stack+0x5>
 50a:	29 30       	cpi	r18, 0x09	; 9
 50c:	10 f0       	brcs	.+4      	; 0x512 <__stack+0x13>
 50e:	2e 30       	cpi	r18, 0x0E	; 14
 510:	c8 f3       	brcs	.-14     	; 0x504 <__stack+0x5>
 512:	2b 32       	cpi	r18, 0x2B	; 43
 514:	39 f0       	breq	.+14     	; 0x524 <__stack+0x25>
 516:	2d 32       	cpi	r18, 0x2D	; 45
 518:	31 f4       	brne	.+12     	; 0x526 <__stack+0x27>
 51a:	68 94       	set
 51c:	03 c0       	rjmp	.+6      	; 0x524 <__stack+0x25>
 51e:	0b d0       	rcall	.+22     	; 0x536 <__mulhi_const_10>
 520:	82 0f       	add	r24, r18
 522:	91 1d       	adc	r25, r1
 524:	21 91       	ld	r18, Z+
 526:	20 53       	subi	r18, 0x30	; 48
 528:	2a 30       	cpi	r18, 0x0A	; 10
 52a:	c8 f3       	brcs	.-14     	; 0x51e <__stack+0x1f>
 52c:	1e f4       	brtc	.+6      	; 0x534 <__stack+0x35>
 52e:	90 95       	com	r25
 530:	81 95       	neg	r24
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	08 95       	ret

00000536 <__mulhi_const_10>:
 536:	7a e0       	ldi	r23, 0x0A	; 10
 538:	97 9f       	mul	r25, r23
 53a:	90 2d       	mov	r25, r0
 53c:	87 9f       	mul	r24, r23
 53e:	80 2d       	mov	r24, r0
 540:	91 0d       	add	r25, r1
 542:	11 24       	eor	r1, r1
 544:	08 95       	ret

00000546 <_exit>:
 546:	f8 94       	cli

00000548 <__stop_program>:
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stop_program>
