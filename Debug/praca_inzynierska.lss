
praca_inzynierska.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000009dc  00000a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080010a  0080010a  00000a7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a14  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0d  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e3a  00000000  00000000  00003391  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  000041cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f7  00000000  00000000  000044e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084e  00000000  00000000  00004bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005429  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	09 c1       	rjmp	.+530    	; 0x234 <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	0f c1       	rjmp	.+542    	; 0x24a <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec ed       	ldi	r30, 0xDC	; 220
  48:	f9 e0       	ldi	r31, 0x09	; 9
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 30       	cpi	r26, 0x0A	; 10
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e0       	ldi	r26, 0x0A	; 10
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 32       	cpi	r26, 0x2A	; 42
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	b7 c4       	rjmp	.+2414   	; 0x9d8 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
#define Prescaler 20000000
#define BAUD_PRESCALE (((Prescaler/(USART_BAUDRATE * 16UL))) - 1)
volatile char bufor[5];
//volatile int timerCount = 0;
int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2e 97       	sbiw	r28, 0x0e	; 14
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	message msg;
	msg.status = 0;
	uint8_t OCR0B_val = 0;
	
	USART_Init(BAUD_PRESCALE);
  80:	81 e8       	ldi	r24, 0x81	; 129
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	82 d2       	rcall	.+1284   	; 0x58a <USART_Init>
	LCD_Initalize();
  86:	2b d2       	rcall	.+1110   	; 0x4de <LCD_Initalize>
    //PWM_init() ;
	ADC_init();
  88:	0c d1       	rcall	.+536    	; 0x2a2 <ADC_init>
    ADC_start();
  8a:	2e d1       	rcall	.+604    	; 0x2e8 <ADC_start>
	BUTTON_Init();
  8c:	91 d1       	rcall	.+802    	; 0x3b0 <BUTTON_Init>
    //TIMER0_init();
	//PWM_select_mode(0);
	PWM_ICR();
  8e:	5d d2       	rcall	.+1210   	; 0x54a <PWM_ICR>
	//Timer0_stop();
sei(); // wlaczenie globalnych przerwan
  90:	78 94       	sei
//volatile int timerCount = 0;
int main(void)
{
	message msg;
	msg.status = 0;
	uint8_t OCR0B_val = 0;
  92:	71 2c       	mov	r7, r1
			   		OCR0B_val = (uint8_t)atoi(temp1);
			   		break;
			   		
			   		case(2):
			   		LCD_WriteData(msg.buffer[0]);LCD_WriteData(msg.buffer[1]);
			   		temp2[0] = msg.buffer[0]; temp2[1] = msg.buffer[1]; temp2[2] = 'X';
  94:	88 e5       	ldi	r24, 0x58	; 88
  96:	68 2e       	mov	r6, r24
        itoa(converter->raw_voltage_input,bufor,10);
		LCD_WriteText(bufor);
	    LCD_WriteText("  ");
        LCD_GoTo(0,1);
		oblicz = (converter->raw_voltage_input)*250; // 768 * 250     
		oblicz = oblicz/127.5; //369   // w przypadku timer0 to bedzie polowa z 255 czyli 127.5
  98:	9a ef       	ldi	r25, 0xFA	; 250
  9a:	59 2e       	mov	r5, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  9c:	24 e6       	ldi	r18, 0x64	; 100
  9e:	e2 2e       	mov	r14, r18
  a0:	f1 2c       	mov	r15, r1
		LCD_GoTo(6,0);
		itoa(converter->raw_voltage_output,bufor,10);
		LCD_WriteText(bufor);
		LCD_WriteText("  ");
		LCD_GoTo(7,1);
		oblicz = (converter->raw_voltage_output)*568; // 768 * 250   //1500
  a2:	38 e3       	ldi	r19, 0x38	; 56
  a4:	83 2e       	mov	r8, r19
  a6:	32 e0       	ldi	r19, 0x02	; 2
  a8:	93 2e       	mov	r9, r19
  aa:	44 ec       	ldi	r20, 0xC4	; 196
  ac:	a4 2e       	mov	r10, r20
  ae:	49 e0       	ldi	r20, 0x09	; 9
  b0:	b4 2e       	mov	r11, r20
  b2:	59 e1       	ldi	r21, 0x19	; 25
  b4:	c5 2e       	mov	r12, r21
  b6:	d1 2c       	mov	r13, r1
			}
		}
	}*/
	while (1) //P?tla g?ówna
	{
	   		msg = USART_MessageManager();
  b8:	7c d2       	rcall	.+1272   	; 0x5b2 <USART_MessageManager>
  ba:	13 2f       	mov	r17, r19
  bc:	04 2f       	mov	r16, r20
  be:	45 2e       	mov	r4, r21
  c0:	29 83       	std	Y+1, r18	; 0x01
  c2:	3a 83       	std	Y+2, r19	; 0x02
  c4:	4b 83       	std	Y+3, r20	; 0x03
  c6:	5c 83       	std	Y+4, r21	; 0x04
  c8:	6d 83       	std	Y+5, r22	; 0x05
	   		
	   		if (msg.status)
  ca:	66 23       	and	r22, r22
  cc:	59 f1       	breq	.+86     	; 0x124 <main+0xb8>
	   		{
		   		char temp1[2];
		   		char temp2[3];
		   		char temp3[4];
		   		
		   		LCD_GoTo(12,0);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	ff d1       	rcall	.+1022   	; 0x4d2 <LCD_GoTo>
		   		//LCD_Clear();
		   		switch (msg.len)
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	59 f0       	breq	.+22     	; 0xf0 <main+0x84>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	99 f0       	breq	.+38     	; 0x104 <main+0x98>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	f9 f4       	brne	.+62     	; 0x120 <main+0xb4>
		   		{
			   		case(1):
			   		LCD_WriteData(msg.buffer[0]);
  e2:	81 2f       	mov	r24, r17
  e4:	e9 d1       	rcall	.+978    	; 0x4b8 <LCD_WriteData>
			   		temp1[0] = msg.buffer[0]; temp1[1] = 'X';
  e6:	1d 87       	std	Y+13, r17	; 0x0d
  e8:	6e 86       	std	Y+14, r6	; 0x0e
			   		OCR0B_val = (uint8_t)atoi(temp1);
  ea:	ce 01       	movw	r24, r28
  ec:	0d 96       	adiw	r24, 0x0d	; 13
  ee:	16 c0       	rjmp	.+44     	; 0x11c <main+0xb0>
			   		break;
			   		
			   		case(2):
			   		LCD_WriteData(msg.buffer[0]);LCD_WriteData(msg.buffer[1]);
  f0:	81 2f       	mov	r24, r17
  f2:	e2 d1       	rcall	.+964    	; 0x4b8 <LCD_WriteData>
  f4:	80 2f       	mov	r24, r16
  f6:	e0 d1       	rcall	.+960    	; 0x4b8 <LCD_WriteData>
			   		temp2[0] = msg.buffer[0]; temp2[1] = msg.buffer[1]; temp2[2] = 'X';
  f8:	1a 87       	std	Y+10, r17	; 0x0a
  fa:	0b 87       	std	Y+11, r16	; 0x0b
  fc:	6c 86       	std	Y+12, r6	; 0x0c
			   		OCR0B_val = (uint8_t)atoi(temp2);
  fe:	ce 01       	movw	r24, r28
 100:	0a 96       	adiw	r24, 0x0a	; 10
 102:	0c c0       	rjmp	.+24     	; 0x11c <main+0xb0>
			   		break;
			   		
			   		case (3):
			   		LCD_WriteData(msg.buffer[0]);LCD_WriteData(msg.buffer[1]);LCD_WriteData(msg.buffer[2]);
 104:	81 2f       	mov	r24, r17
 106:	d8 d1       	rcall	.+944    	; 0x4b8 <LCD_WriteData>
 108:	80 2f       	mov	r24, r16
 10a:	d6 d1       	rcall	.+940    	; 0x4b8 <LCD_WriteData>
 10c:	84 2d       	mov	r24, r4
 10e:	d4 d1       	rcall	.+936    	; 0x4b8 <LCD_WriteData>
			   		temp3[0] = msg.buffer[0]; temp3[1] = msg.buffer[1]; temp3[2] = msg.buffer[2]; temp3[3] = 'X';
 110:	1e 83       	std	Y+6, r17	; 0x06
 112:	0f 83       	std	Y+7, r16	; 0x07
 114:	48 86       	std	Y+8, r4	; 0x08
 116:	69 86       	std	Y+9, r6	; 0x09
			   		OCR0B_val = (uint8_t)atoi(temp3);
 118:	ce 01       	movw	r24, r28
 11a:	06 96       	adiw	r24, 0x06	; 6
 11c:	05 d4       	rcall	.+2058   	; 0x928 <atoi>
 11e:	78 2e       	mov	r7, r24
			   		break;
		   		}
		   		PWM_UpdateOCR0B(OCR0B_val);
 120:	87 2d       	mov	r24, r7
 122:	31 d2       	rcall	.+1122   	; 0x586 <PWM_UpdateOCR0B>
	   		
		}
       BUTTON_check_pressed(); //sprawdz przycisk
 124:	4c d1       	rcall	.+664    	; 0x3be <BUTTON_check_pressed>
		LCD_GoTo(0,0);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	d3 d1       	rcall	.+934    	; 0x4d2 <LCD_GoTo>
        itoa(converter->raw_voltage_input,bufor,10);
 12c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 130:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	6e e1       	ldi	r22, 0x1E	; 30
 138:	71 e0       	ldi	r23, 0x01	; 1
 13a:	80 81       	ld	r24, Z
 13c:	91 81       	ldd	r25, Z+1	; 0x01
 13e:	11 d4       	rcall	.+2082   	; 0x962 <__itoa_ncheck>
		LCD_WriteText(bufor);
 140:	8e e1       	ldi	r24, 0x1E	; 30
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	bb d1       	rcall	.+886    	; 0x4bc <LCD_WriteText>
	    LCD_WriteText("  ");
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	b8 d1       	rcall	.+880    	; 0x4bc <LCD_WriteText>
        LCD_GoTo(0,1);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	c0 d1       	rcall	.+896    	; 0x4d2 <LCD_GoTo>
		oblicz = (converter->raw_voltage_input)*250; // 768 * 250     
 152:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 156:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
		oblicz = oblicz/127.5; //369   // w przypadku timer0 to bedzie polowa z 255 czyli 127.5
 15a:	80 81       	ld	r24, Z
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	58 9e       	mul	r5, r24
 160:	b0 01       	movw	r22, r0
 162:	59 9e       	mul	r5, r25
 164:	70 0d       	add	r23, r0
 166:	11 24       	eor	r1, r1
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	3b d3       	rcall	.+1654   	; 0x7e4 <__floatunsisf>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	4f ef       	ldi	r20, 0xFF	; 255
 174:	52 e4       	ldi	r21, 0x42	; 66
 176:	a2 d2       	rcall	.+1348   	; 0x6bc <__divsf3>
 178:	09 d3       	rcall	.+1554   	; 0x78c <__fixunssfsi>
 17a:	cb 01       	movw	r24, r22
 17c:	b7 01       	movw	r22, r14
 17e:	c0 d3       	rcall	.+1920   	; 0x900 <__udivmodhi4>
 180:	9b 01       	movw	r18, r22
 182:	8c 01       	movw	r16, r24
 184:	4a e0       	ldi	r20, 0x0A	; 10
 186:	6e e1       	ldi	r22, 0x1E	; 30
 188:	71 e0       	ldi	r23, 0x01	; 1
 18a:	c9 01       	movw	r24, r18
 18c:	ea d3       	rcall	.+2004   	; 0x962 <__itoa_ncheck>
		itoa(oblicz/100,bufor,10);      //konwersja wyniku do tablicy char
		LCD_WriteText(bufor);//3
 18e:	8e e1       	ldi	r24, 0x1E	; 30
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	94 d1       	rcall	.+808    	; 0x4bc <LCD_WriteText>
		LCD_WriteText(",");//
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	91 d1       	rcall	.+802    	; 0x4bc <LCD_WriteText>
 19a:	4a e0       	ldi	r20, 0x0A	; 10
 19c:	6e e1       	ldi	r22, 0x1E	; 30
 19e:	71 e0       	ldi	r23, 0x01	; 1
 1a0:	c8 01       	movw	r24, r16
 1a2:	df d3       	rcall	.+1982   	; 0x962 <__itoa_ncheck>
		itoa(oblicz%100,bufor,10);
		LCD_WriteText(bufor);//69
 1a4:	8e e1       	ldi	r24, 0x1E	; 30
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	89 d1       	rcall	.+786    	; 0x4bc <LCD_WriteText>
		LCD_WriteText("V");
 1aa:	87 e0       	ldi	r24, 0x07	; 7
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	86 d1       	rcall	.+780    	; 0x4bc <LCD_WriteText>
       
		//--
		LCD_GoTo(6,0);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	8e d1       	rcall	.+796    	; 0x4d2 <LCD_GoTo>
		itoa(converter->raw_voltage_output,bufor,10);
 1b6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1ba:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1be:	4a e0       	ldi	r20, 0x0A	; 10
 1c0:	6e e1       	ldi	r22, 0x1E	; 30
 1c2:	71 e0       	ldi	r23, 0x01	; 1
 1c4:	82 81       	ldd	r24, Z+2	; 0x02
 1c6:	93 81       	ldd	r25, Z+3	; 0x03
 1c8:	cc d3       	rcall	.+1944   	; 0x962 <__itoa_ncheck>
		LCD_WriteText(bufor);
 1ca:	8e e1       	ldi	r24, 0x1E	; 30
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	76 d1       	rcall	.+748    	; 0x4bc <LCD_WriteText>
		LCD_WriteText("  ");
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	73 d1       	rcall	.+742    	; 0x4bc <LCD_WriteText>
		LCD_GoTo(7,1);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	7b d1       	rcall	.+758    	; 0x4d2 <LCD_GoTo>
		oblicz = (converter->raw_voltage_output)*568; // 768 * 250   //1500
 1dc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1e0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1e4:	82 81       	ldd	r24, Z+2	; 0x02
 1e6:	93 81       	ldd	r25, Z+3	; 0x03
 1e8:	88 9d       	mul	r24, r8
 1ea:	80 01       	movw	r16, r0
 1ec:	89 9d       	mul	r24, r9
 1ee:	10 0d       	add	r17, r0
 1f0:	98 9d       	mul	r25, r8
 1f2:	10 0d       	add	r17, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	c8 01       	movw	r24, r16
 1f8:	b5 01       	movw	r22, r10
 1fa:	82 d3       	rcall	.+1796   	; 0x900 <__udivmodhi4>
 1fc:	cb 01       	movw	r24, r22
 1fe:	4a e0       	ldi	r20, 0x0A	; 10
 200:	6e e1       	ldi	r22, 0x1E	; 30
 202:	71 e0       	ldi	r23, 0x01	; 1
 204:	ae d3       	rcall	.+1884   	; 0x962 <__itoa_ncheck>
		oblicz = oblicz/25; //369   // w przypadku timer0 to bedzie polowa z 255 czyli 127.5
		itoa(oblicz/100,bufor,10);      //konwersja wyniku do tablicy char
		LCD_WriteText(bufor);//3
 206:	8e e1       	ldi	r24, 0x1E	; 30
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	58 d1       	rcall	.+688    	; 0x4bc <LCD_WriteText>
		
		LCD_WriteText(",");//
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	55 d1       	rcall	.+682    	; 0x4bc <LCD_WriteText>
 212:	c8 01       	movw	r24, r16
 214:	b6 01       	movw	r22, r12
 216:	74 d3       	rcall	.+1768   	; 0x900 <__udivmodhi4>
 218:	cb 01       	movw	r24, r22
 21a:	b7 01       	movw	r22, r14
 21c:	71 d3       	rcall	.+1762   	; 0x900 <__udivmodhi4>
 21e:	4a e0       	ldi	r20, 0x0A	; 10
 220:	6e e1       	ldi	r22, 0x1E	; 30
 222:	71 e0       	ldi	r23, 0x01	; 1
 224:	9e d3       	rcall	.+1852   	; 0x962 <__itoa_ncheck>
		itoa(oblicz%100,bufor,10);
		LCD_WriteText(bufor);//69
 226:	8e e1       	ldi	r24, 0x1E	; 30
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	48 d1       	rcall	.+656    	; 0x4bc <LCD_WriteText>
		LCD_WriteText("V");
 22c:	87 e0       	ldi	r24, 0x07	; 7
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	45 d1       	rcall	.+650    	; 0x4bc <LCD_WriteText>
		{
			if(blok == 0) OCR1A --;
			if(OCR1A < 1) blok = 1;
		}*/

	} 
 232:	42 cf       	rjmp	.-380    	; 0xb8 <main+0x4c>

00000234 <__vector_16>:
}

ISR(TIMER0_OVF_vect)//przerwanie przepe?nienie timer0
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
	
	TCNT0 = 0;  //Pocz?tkowa warto?? licznika
 23e:	16 bc       	out	0x26, r1	; 38
}
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_21>:
ISR(ADC_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	//LCD_GoTo(10,0);
	//LCD_WriteText("test");
	ADC_select_channel();
 26c:	43 d0       	rcall	.+134    	; 0x2f4 <ADC_select_channel>
	 if(converter->adc_ready_flag == 1)
 26e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 272:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 276:	85 81       	ldd	r24, Z+5	; 0x05
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	09 f4       	brne	.+2      	; 0x27e <__vector_21+0x34>
	 {
		 converter->adc_ready_flag = 0;
 27c:	15 82       	std	Z+5, r1	; 0x05
		//pwm_algorithm();
	 }
	
	ADC_start();
 27e:	34 d0       	rcall	.+104    	; 0x2e8 <ADC_start>
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <ADC_init>:
struct str_ADC_measure obADC_measure; 
struct str_ADC_measure *converter = &obADC_measure;

void ADC_init()
{
	converter->adc_switch = ADC2;
 2a2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 2a6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	84 83       	std	Z+4, r24	; 0x04
	
	//DDRC |= (1<<PC3) | (1<<PC2);
    ADCSRA |= (1<<ADEN); //ustawienie tego bitu na 1 w?cza przetwornik ADC mikrokontrolera.
 2ae:	ea e7       	ldi	r30, 0x7A	; 122
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	80 83       	st	Z, r24

	ADCSRA |=/* (1<<ADATE)|*/(1<<ADIF)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1); // tryb ciaglej konwercji free run oraz ustawienie preskalera =32
 2b8:	80 81       	ld	r24, Z
 2ba:	8e 61       	ori	r24, 0x1E	; 30
 2bc:	80 83       	st	Z, r24

	ADMUX |= (1<<REFS0) | (1<<ADLAR) | (converter->adc_switch);
 2be:	ec e7       	ldi	r30, 0x7C	; 124
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	90 81       	ld	r25, Z
 2c4:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 2c8:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 2cc:	14 96       	adiw	r26, 0x04	; 4
 2ce:	8c 91       	ld	r24, X
 2d0:	89 2b       	or	r24, r25
 2d2:	80 66       	ori	r24, 0x60	; 96
 2d4:	80 83       	st	Z, r24
	//ADCSRB &= ~( (1 << ADTS2) | (1 << ADTS1) | (1 << ADTS0) );
	//ADCSRB = (1 << ADTS2);
	converter->raw_voltage_input = 0;
 2d6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 2da:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 2de:	11 82       	std	Z+1, r1	; 0x01
 2e0:	10 82       	st	Z, r1
	converter->raw_voltage_output = 0;
 2e2:	13 82       	std	Z+3, r1	; 0x03
 2e4:	12 82       	std	Z+2, r1	; 0x02
 2e6:	08 95       	ret

000002e8 <ADC_start>:
}

void ADC_start()  //str 191 start konwersji
{
	ADCSRA |= (1<<ADSC);
 2e8:	ea e7       	ldi	r30, 0x7A	; 122
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	80 83       	st	Z, r24
 2f2:	08 95       	ret

000002f4 <ADC_select_channel>:
{
	static uint8_t counter = 0;
	static uint16_t sampleADC2 = 0;
	static uint16_t sampleADC3 = 0;
	
	if(counter < SAMPLES)
 2f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter.1623>
 2f8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 2fc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 300:	84 30       	cpi	r24, 0x04	; 4
 302:	a8 f5       	brcc	.+106    	; 0x36e <ADC_select_channel+0x7a>
	{	
		switch(converter->adc_switch)
 304:	94 81       	ldd	r25, Z+4	; 0x04
 306:	92 30       	cpi	r25, 0x02	; 2
 308:	a1 f0       	breq	.+40     	; 0x332 <ADC_select_channel+0x3e>
 30a:	93 30       	cpi	r25, 0x03	; 3
 30c:	01 f5       	brne	.+64     	; 0x34e <ADC_select_channel+0x5a>
				sampleADC2 += ADCH;     //odczytaj tylko starszy bajt pomiaru
				converter->adc_switch = ADC3;
				break;			
			case ADC3://gdy PC3
				//converter->adc_ready_flag = 0;
				sampleADC3 += ADCH;     //odczytaj tylko starszy bajt pomiaru
 30e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 312:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 316:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 31a:	29 0f       	add	r18, r25
 31c:	31 1d       	adc	r19, r1
 31e:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <__data_end+0x1>
 322:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__data_end>
				converter->adc_switch = ADC2;
 326:	92 e0       	ldi	r25, 0x02	; 2
 328:	94 83       	std	Z+4, r25	; 0x04
				counter++;
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <counter.1623>
				break;
 330:	0e c0       	rjmp	.+28     	; 0x34e <ADC_select_channel+0x5a>
	{	
		switch(converter->adc_switch)
		{
			case ADC2://gdy PC2
				//converter->adc_ready_flag = 0;
				sampleADC2 += ADCH;     //odczytaj tylko starszy bajt pomiaru
 332:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
 336:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sampleADC2.1624>
 33a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sampleADC2.1624+0x1>
 33e:	82 0f       	add	r24, r18
 340:	91 1d       	adc	r25, r1
 342:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sampleADC2.1624+0x1>
 346:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sampleADC2.1624>
				converter->adc_switch = ADC3;
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	84 83       	std	Z+4, r24	; 0x04
				sampleADC3 += ADCH;     //odczytaj tylko starszy bajt pomiaru
				converter->adc_switch = ADC2;
				counter++;
				break;
		}
		ADMUX &= ~(0x03);  //kasowanie converter->adc_switch
 34e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 352:	8c 7f       	andi	r24, 0xFC	; 252
 354:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>

		ADMUX  |= (converter->adc_switch); //Ustawianie nowych warto?ci
 358:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 35c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 360:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 364:	84 81       	ldd	r24, Z+4	; 0x04
 366:	89 2b       	or	r24, r25
 368:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 36c:	08 95       	ret
	}
	else
	{
		converter->raw_voltage_input = sampleADC2 / SAMPLES;
 36e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sampleADC2.1624>
 372:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sampleADC2.1624+0x1>
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	91 83       	std	Z+1, r25	; 0x01
 380:	80 83       	st	Z, r24
		converter->raw_voltage_output = sampleADC3 / SAMPLES;
 382:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 386:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	93 83       	std	Z+3, r25	; 0x03
 394:	82 83       	std	Z+2, r24	; 0x02
		counter = 0;
 396:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter.1623>
		sampleADC2 = 0;
 39a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <sampleADC2.1624+0x1>
 39e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sampleADC2.1624>
		sampleADC3 = 0;
 3a2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 3a6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		converter->adc_ready_flag = 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	85 83       	std	Z+5, r24	; 0x05
 3ae:	08 95       	ret

000003b0 <BUTTON_Init>:
#include "../inc/pwm.h"
#include "../inc/button.h"

void BUTTON_Init()
{
	DDRC &= ~ ((SWITCH) | (SWITCH2));
 3b0:	87 b1       	in	r24, 0x07	; 7
 3b2:	8f 7c       	andi	r24, 0xCF	; 207
 3b4:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((SWITCH) | (SWITCH2)); //rezystor wewnetrzny
 3b6:	88 b1       	in	r24, 0x08	; 8
 3b8:	80 63       	ori	r24, 0x30	; 48
 3ba:	88 b9       	out	0x08, r24	; 8
 3bc:	08 95       	ret

000003be <BUTTON_check_pressed>:

void BUTTON_check_pressed()
{
	static int8_t selector = 0;
	
	if(SWITCH_ON)
 3be:	35 99       	sbic	0x06, 5	; 6
 3c0:	14 c0       	rjmp	.+40     	; 0x3ea <BUTTON_check_pressed+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	84 e3       	ldi	r24, 0x34	; 52
 3c6:	9c e0       	ldi	r25, 0x0C	; 12
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <BUTTON_check_pressed+0xa>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <BUTTON_check_pressed+0x14>
 3d2:	00 00       	nop
	{
		_delay_ms(200);
		
		selector++;
 3d4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <selector.1743>
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
		if (selector>2)
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	0c f0       	brlt	.+2      	; 0x3e0 <BUTTON_check_pressed+0x22>
		{
			selector=2;
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <selector.1743>
		}
		while(SWITCH_ON){}
 3e4:	35 9b       	sbis	0x06, 5	; 6
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <BUTTON_check_pressed+0x26>
 3e8:	17 c0       	rjmp	.+46     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		PWM_select_mode(selector);
		
	}
	else if(SWITCH_ON2)
 3ea:	34 99       	sbic	0x06, 4	; 6
 3ec:	18 c0       	rjmp	.+48     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	84 e3       	ldi	r24, 0x34	; 52
 3f2:	9c e0       	ldi	r25, 0x0C	; 12
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <BUTTON_check_pressed+0x36>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <BUTTON_check_pressed+0x40>
 3fe:	00 00       	nop
	{
		_delay_ms(200);
		
		selector--;
 400:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <selector.1743>
 404:	81 50       	subi	r24, 0x01	; 1
		if (selector<0)
 406:	87 fd       	sbrc	r24, 7
 408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	}
	else if(SWITCH_ON2)
	{
		_delay_ms(200);
		
		selector--;
 40a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <selector.1743>
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		if (selector<0)
		{
			selector=0;
 410:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <selector.1743>
		}
		while(SWITCH_ON2){}
 414:	34 9b       	sbis	0x06, 4	; 6
 416:	fe cf       	rjmp	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		PWM_select_mode(selector);
 418:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <selector.1743>
 41c:	a9 c0       	rjmp	.+338    	; 0x570 <PWM_select_mode>
 41e:	08 95       	ret

00000420 <_LCD_OutNibble>:
 420:	80 ff       	sbrs	r24, 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <_LCD_OutNibble+0x8>
 424:	28 9a       	sbi	0x05, 0	; 5
 426:	01 c0       	rjmp	.+2      	; 0x42a <_LCD_OutNibble+0xa>
 428:	28 98       	cbi	0x05, 0	; 5
 42a:	81 ff       	sbrs	r24, 1
 42c:	02 c0       	rjmp	.+4      	; 0x432 <_LCD_OutNibble+0x12>
 42e:	5f 9a       	sbi	0x0b, 7	; 11
 430:	01 c0       	rjmp	.+2      	; 0x434 <_LCD_OutNibble+0x14>
 432:	5f 98       	cbi	0x0b, 7	; 11
 434:	82 ff       	sbrs	r24, 2
 436:	02 c0       	rjmp	.+4      	; 0x43c <_LCD_OutNibble+0x1c>
 438:	40 9a       	sbi	0x08, 0	; 8
 43a:	01 c0       	rjmp	.+2      	; 0x43e <_LCD_OutNibble+0x1e>
 43c:	40 98       	cbi	0x08, 0	; 8
 43e:	83 ff       	sbrs	r24, 3
 440:	02 c0       	rjmp	.+4      	; 0x446 <_LCD_OutNibble+0x26>
 442:	41 9a       	sbi	0x08, 1	; 8
 444:	08 95       	ret
 446:	41 98       	cbi	0x08, 1	; 8
 448:	08 95       	ret

0000044a <_LCD_InNibble>:
 44a:	83 b1       	in	r24, 0x03	; 3
 44c:	81 70       	andi	r24, 0x01	; 1
 44e:	4f 99       	sbic	0x09, 7	; 9
 450:	82 60       	ori	r24, 0x02	; 2
 452:	30 99       	sbic	0x06, 0	; 6
 454:	84 60       	ori	r24, 0x04	; 4
 456:	31 99       	sbic	0x06, 1	; 6
 458:	88 60       	ori	r24, 0x08	; 8
 45a:	08 95       	ret

0000045c <_LCD_Read>:
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	20 98       	cbi	0x04, 0	; 4
 462:	57 98       	cbi	0x0a, 7	; 10
 464:	38 98       	cbi	0x07, 0	; 7
 466:	39 98       	cbi	0x07, 1	; 7
 468:	5c 9a       	sbi	0x0b, 4	; 11
 46a:	5a 9a       	sbi	0x0b, 2	; 11
 46c:	ee df       	rcall	.-36     	; 0x44a <_LCD_InNibble>
 46e:	90 e1       	ldi	r25, 0x10	; 16
 470:	89 9f       	mul	r24, r25
 472:	e0 01       	movw	r28, r0
 474:	11 24       	eor	r1, r1
 476:	5a 98       	cbi	0x0b, 2	; 11
 478:	5a 9a       	sbi	0x0b, 2	; 11
 47a:	e7 df       	rcall	.-50     	; 0x44a <_LCD_InNibble>
 47c:	5a 98       	cbi	0x0b, 2	; 11
 47e:	8c 2b       	or	r24, r28
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <LCD_ReadStatus>:
 486:	5b 98       	cbi	0x0b, 3	; 11
 488:	e9 cf       	rjmp	.-46     	; 0x45c <_LCD_Read>

0000048a <_LCD_Write>:
 48a:	cf 93       	push	r28
 48c:	c8 2f       	mov	r28, r24
 48e:	20 9a       	sbi	0x04, 0	; 4
 490:	57 9a       	sbi	0x0a, 7	; 10
 492:	38 9a       	sbi	0x07, 0	; 7
 494:	39 9a       	sbi	0x07, 1	; 7
 496:	5c 98       	cbi	0x0b, 4	; 11
 498:	5a 9a       	sbi	0x0b, 2	; 11
 49a:	82 95       	swap	r24
 49c:	8f 70       	andi	r24, 0x0F	; 15
 49e:	c0 df       	rcall	.-128    	; 0x420 <_LCD_OutNibble>
 4a0:	5a 98       	cbi	0x0b, 2	; 11
 4a2:	5a 9a       	sbi	0x0b, 2	; 11
 4a4:	8c 2f       	mov	r24, r28
 4a6:	bc df       	rcall	.-136    	; 0x420 <_LCD_OutNibble>
 4a8:	5a 98       	cbi	0x0b, 2	; 11
 4aa:	ed df       	rcall	.-38     	; 0x486 <LCD_ReadStatus>
 4ac:	87 fd       	sbrc	r24, 7
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <_LCD_Write+0x20>
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <LCD_WriteCommand>:
 4b4:	5b 98       	cbi	0x0b, 3	; 11
 4b6:	e9 cf       	rjmp	.-46     	; 0x48a <_LCD_Write>

000004b8 <LCD_WriteData>:
 4b8:	5b 9a       	sbi	0x0b, 3	; 11
 4ba:	e7 cf       	rjmp	.-50     	; 0x48a <_LCD_Write>

000004bc <LCD_WriteText>:
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ec 01       	movw	r28, r24
 4c2:	89 91       	ld	r24, Y+
 4c4:	88 23       	and	r24, r24
 4c6:	11 f0       	breq	.+4      	; 0x4cc <LCD_WriteText+0x10>
 4c8:	f7 df       	rcall	.-18     	; 0x4b8 <LCD_WriteData>
 4ca:	fb cf       	rjmp	.-10     	; 0x4c2 <LCD_WriteText+0x6>
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <LCD_GoTo>:
 4d2:	90 e4       	ldi	r25, 0x40	; 64
 4d4:	69 9f       	mul	r22, r25
 4d6:	80 0d       	add	r24, r0
 4d8:	11 24       	eor	r1, r1
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	eb cf       	rjmp	.-42     	; 0x4b4 <LCD_WriteCommand>

000004de <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 4de:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 4e0:	20 9a       	sbi	0x04, 0	; 4
LCD_DB5_DIR |= LCD_DB5; //
 4e2:	57 9a       	sbi	0x0a, 7	; 10
LCD_DB6_DIR |= LCD_DB6; //
 4e4:	38 9a       	sbi	0x07, 0	; 7
LCD_DB7_DIR |= LCD_DB7; //
 4e6:	39 9a       	sbi	0x07, 1	; 7
LCD_E_DIR 	|= LCD_E;   //
 4e8:	52 9a       	sbi	0x0a, 2	; 10
LCD_RS_DIR 	|= LCD_RS;  //
 4ea:	53 9a       	sbi	0x0a, 3	; 10
LCD_RW_DIR 	|= LCD_RW;  //
 4ec:	54 9a       	sbi	0x0a, 4	; 10
 4ee:	2f e5       	ldi	r18, 0x5F	; 95
 4f0:	8a ee       	ldi	r24, 0xEA	; 234
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	21 50       	subi	r18, 0x01	; 1
 4f6:	80 40       	sbci	r24, 0x00	; 0
 4f8:	90 40       	sbci	r25, 0x00	; 0
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <LCD_Initalize+0x16>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_Initalize+0x20>
 4fe:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 500:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 502:	5a 98       	cbi	0x0b, 2	; 11
LCD_RW_PORT &= ~LCD_RW;
 504:	5c 98       	cbi	0x0b, 4	; 11
 506:	c3 e0       	ldi	r28, 0x03	; 3
for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 508:	5a 9a       	sbi	0x0b, 2	; 11
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	89 df       	rcall	.-238    	; 0x420 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 50e:	5a 98       	cbi	0x0b, 2	; 11
 510:	87 ea       	ldi	r24, 0xA7	; 167
 512:	91 e6       	ldi	r25, 0x61	; 97
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <__stack+0x15>
 518:	00 c0       	rjmp	.+0      	; 0x51a <__stack+0x1b>
 51a:	00 00       	nop
 51c:	c1 50       	subi	r28, 0x01	; 1
LCD_RW_DIR 	|= LCD_RW;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
LCD_RW_PORT &= ~LCD_RW;
for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 51e:	a1 f7       	brne	.-24     	; 0x508 <__stack+0x9>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 520:	5a 9a       	sbi	0x0b, 2	; 11
_LCD_OutNibble(0x02); // tryb 4-bitowy
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	7d df       	rcall	.-262    	; 0x420 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 526:	5a 98       	cbi	0x0b, 2	; 11
 528:	87 e8       	ldi	r24, 0x87	; 135
 52a:	93 e1       	ldi	r25, 0x13	; 19
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <__stack+0x2d>
 530:	00 c0       	rjmp	.+0      	; 0x532 <__stack+0x33>
 532:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 534:	88 e2       	ldi	r24, 0x28	; 40
 536:	be df       	rcall	.-132    	; 0x4b4 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 538:	88 e0       	ldi	r24, 0x08	; 8
 53a:	bc df       	rcall	.-136    	; 0x4b4 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	ba df       	rcall	.-140    	; 0x4b4 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 540:	86 e0       	ldi	r24, 0x06	; 6
 542:	b8 df       	rcall	.-144    	; 0x4b4 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 544:	8c e0       	ldi	r24, 0x0C	; 12
}
 546:	cf 91       	pop	r28
_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 548:	b5 cf       	rjmp	.-150    	; 0x4b4 <LCD_WriteCommand>

0000054a <PWM_ICR>:

void Timer0_stop()
{
	
	TCCR0B &=~((1<<CS10)|(1<<CS11)|(1<<CS12));//wylaczenie timera
	TCNT0 = 0;
 54a:	55 9a       	sbi	0x0a, 5	; 10
 54c:	5d 9a       	sbi	0x0b, 5	; 11
 54e:	84 b5       	in	r24, 0x24	; 36
 550:	80 6a       	ori	r24, 0xA0	; 160
 552:	84 bd       	out	0x24, r24	; 36
 554:	84 b5       	in	r24, 0x24	; 36
 556:	83 60       	ori	r24, 0x03	; 3
 558:	84 bd       	out	0x24, r24	; 36
 55a:	85 b5       	in	r24, 0x25	; 37
 55c:	88 60       	ori	r24, 0x08	; 8
 55e:	85 bd       	out	0x25, r24	; 37
 560:	87 ec       	ldi	r24, 0xC7	; 199
 562:	87 bd       	out	0x27, r24	; 39
 564:	85 b5       	in	r24, 0x25	; 37
 566:	81 60       	ori	r24, 0x01	; 1
 568:	85 bd       	out	0x25, r24	; 37
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	88 bd       	out	0x28, r24	; 40
 56e:	08 95       	ret

00000570 <PWM_select_mode>:
void PWM_select_mode(uint8_t selector)
{
	//PWM_init();
	_mode = selector;
	//selector = 0;
	switch(selector)
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	31 f0       	breq	.+12     	; 0x580 <PWM_select_mode+0x10>
 574:	18 f0       	brcs	.+6      	; 0x57c <PWM_select_mode+0xc>
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	19 f0       	breq	.+6      	; 0x580 <PWM_select_mode+0x10>
 57a:	08 95       	ret
	{
		case MODE_8BIT:
		//TCCR0B |= (1 << CS10);
		OCR0A = 199;
 57c:	87 ec       	ldi	r24, 0xC7	; 199
 57e:	01 c0       	rjmp	.+2      	; 0x582 <PWM_select_mode+0x12>
		OCR0A = 255;
		break;
		
		case MODE_10BIT:
		//TCCR0B |= (1 << CS10);
		OCR0A = 255;
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	87 bd       	out	0x27, r24	; 39
 584:	08 95       	ret

00000586 <PWM_UpdateOCR0B>:
	}
}

void PWM_UpdateOCR0B(uint8_t value)
{
	OCR0B = value;
 586:	88 bd       	out	0x28, r24	; 40
 588:	08 95       	ret

0000058a <USART_Init>:
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
 58a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 58e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 592:	88 e1       	ldi	r24, 0x18	; 24
 594:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 598:	8e e0       	ldi	r24, 0x0E	; 14
 59a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
 59e:	08 95       	ret

000005a0 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	//while (!(UCSR0A & (1<<RXC0)));	
	if(UCSR0A & (1<<RXC0))
 5a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 5a4:	87 ff       	sbrs	r24, 7
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <USART_Receive+0xe>
	{
		return UDR0;
 5a8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 5ac:	08 95       	ret
	}
		
	return Error;
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
}
 5b0:	08 95       	ret

000005b2 <USART_MessageManager>:

message USART_MessageManager()
{
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <USART_MessageManager+0x6>
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <USART_MessageManager+0x8>
 5ba:	1f 92       	push	r1
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
	static message dummyMessage;
	uint8_t datapart = 0;
	static uint8_t cnt = 0;
	static uint16_t noMessageCnt = 0;

	switch (state)
 5c0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state.1788>
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	b9 f0       	breq	.+46     	; 0x5f6 <USART_MessageManager+0x44>
 5c8:	18 f0       	brcs	.+6      	; 0x5d0 <USART_MessageManager+0x1e>
 5ca:	82 30       	cpi	r24, 0x02	; 2
 5cc:	11 f1       	breq	.+68     	; 0x612 <USART_MessageManager+0x60>
 5ce:	48 c0       	rjmp	.+144    	; 0x660 <USART_MessageManager+0xae>
	{
		case(USART_Init_State):
		ms.len = 0;
 5d0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ms.1789>
		ms.buffer[0] = '0'; ms.buffer[1] = '0'; ms.buffer[2] = '0';
 5d4:	80 e3       	ldi	r24, 0x30	; 48
 5d6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ms.1789+0x1>
 5da:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <ms.1789+0x2>
 5de:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ms.1789+0x3>
		ms.status = USART_Message_NOK;
 5e2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <ms.1789+0x4>
		cnt = 0;
 5e6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cnt.1792>
		dummyMessage.len = 0;//informuje w main ze ramka/dane jeszcze nie przyszla
 5ea:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <dummyMessage.1790>

		state = USART_Get_Len_State;//przenosi do nowego stanu 
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <state.1788>
		break;
 5f4:	35 c0       	rjmp	.+106    	; 0x660 <USART_MessageManager+0xae>

		case(USART_Get_Len_State):

		ms.len = USART_Receive();
 5f6:	d4 df       	rcall	.-88     	; 0x5a0 <USART_Receive>
 5f8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ms.1789>
		if (ms.len != Error && ms.len != 0 && ms.len <= 3) //zabezpieczenie
 5fc:	81 50       	subi	r24, 0x01	; 1
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	30 f5       	brcc	.+76     	; 0x64e <USART_MessageManager+0x9c>
		{
			state = USART_Get_Data_State;
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <state.1788>
			noMessageCnt = 0;
 608:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <noMessageCnt.1793+0x1>
 60c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <noMessageCnt.1793>
 610:	1e c0       	rjmp	.+60     	; 0x64e <USART_MessageManager+0x9c>
		}
		noMessageCnt++;
		break;

		case(USART_Get_Data_State):
		datapart = USART_Receive();
 612:	c6 df       	rcall	.-116    	; 0x5a0 <USART_Receive>
 614:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <ms.1789>

		if (datapart != Error && cnt < ms.len)
 618:	8f 3f       	cpi	r24, 0xFF	; 255
 61a:	81 f0       	breq	.+32     	; 0x63c <USART_MessageManager+0x8a>
 61c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cnt.1792>
 620:	92 17       	cp	r25, r18
 622:	60 f4       	brcc	.+24     	; 0x63c <USART_MessageManager+0x8a>
		{
			ms.buffer[cnt] = datapart;
 624:	e9 2f       	mov	r30, r25
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	e8 5e       	subi	r30, 0xE8	; 232
 62a:	fe 4f       	sbci	r31, 0xFE	; 254
 62c:	81 83       	std	Z+1, r24	; 0x01
			cnt++;
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cnt.1792>
			noMessageCnt = 0;
 634:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <noMessageCnt.1793+0x1>
 638:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <noMessageCnt.1793>
		}
		if (cnt == ms.len)
 63c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cnt.1792>
 640:	28 13       	cpse	r18, r24
 642:	05 c0       	rjmp	.+10     	; 0x64e <USART_MessageManager+0x9c>
		{
			ms.status = USART_Message_OK;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <ms.1789+0x4>
			state = USART_Init_State;
 64a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <state.1788>
		}
		noMessageCnt++;
 64e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noMessageCnt.1793>
 652:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <noMessageCnt.1793+0x1>
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <noMessageCnt.1793+0x1>
 65c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <noMessageCnt.1793>
		break;
	}

	if (noMessageCnt > USART_Message_Timeout)
 660:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <noMessageCnt.1793>
 664:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <noMessageCnt.1793+0x1>
 668:	81 31       	cpi	r24, 0x11	; 17
 66a:	97 42       	sbci	r25, 0x27	; 39
 66c:	30 f0       	brcs	.+12     	; 0x67a <USART_MessageManager+0xc8>
	{
		state = USART_Init_State;
 66e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <state.1788>
		noMessageCnt = 0;
 672:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <noMessageCnt.1793+0x1>
 676:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <noMessageCnt.1793>
	}

	if (ms.status == USART_Message_OK)
 67a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <ms.1789+0x4>
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	21 f4       	brne	.+8      	; 0x68a <USART_MessageManager+0xd8>
	{
		return ms;
 682:	85 e0       	ldi	r24, 0x05	; 5
 684:	e8 e1       	ldi	r30, 0x18	; 24
 686:	f1 e0       	ldi	r31, 0x01	; 1
 688:	03 c0       	rjmp	.+6      	; 0x690 <USART_MessageManager+0xde>
	}
	else
	{
		return dummyMessage;
 68a:	85 e0       	ldi	r24, 0x05	; 5
 68c:	e2 e1       	ldi	r30, 0x12	; 18
 68e:	f1 e0       	ldi	r31, 0x01	; 1
 690:	de 01       	movw	r26, r28
 692:	11 96       	adiw	r26, 0x01	; 1
 694:	01 90       	ld	r0, Z+
 696:	0d 92       	st	X+, r0
 698:	8a 95       	dec	r24
 69a:	e1 f7       	brne	.-8      	; 0x694 <USART_MessageManager+0xe2>
 69c:	29 81       	ldd	r18, Y+1	; 0x01
 69e:	3a 81       	ldd	r19, Y+2	; 0x02
 6a0:	4b 81       	ldd	r20, Y+3	; 0x03
 6a2:	5c 81       	ldd	r21, Y+4	; 0x04
 6a4:	6d 81       	ldd	r22, Y+5	; 0x05
	}
}
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0f 90       	pop	r0
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <__divsf3>:
 6bc:	0c d0       	rcall	.+24     	; 0x6d6 <__divsf3x>
 6be:	e6 c0       	rjmp	.+460    	; 0x88c <__fp_round>
 6c0:	de d0       	rcall	.+444    	; 0x87e <__fp_pscB>
 6c2:	40 f0       	brcs	.+16     	; 0x6d4 <__divsf3+0x18>
 6c4:	d5 d0       	rcall	.+426    	; 0x870 <__fp_pscA>
 6c6:	30 f0       	brcs	.+12     	; 0x6d4 <__divsf3+0x18>
 6c8:	21 f4       	brne	.+8      	; 0x6d2 <__divsf3+0x16>
 6ca:	5f 3f       	cpi	r21, 0xFF	; 255
 6cc:	19 f0       	breq	.+6      	; 0x6d4 <__divsf3+0x18>
 6ce:	c7 c0       	rjmp	.+398    	; 0x85e <__fp_inf>
 6d0:	51 11       	cpse	r21, r1
 6d2:	10 c1       	rjmp	.+544    	; 0x8f4 <__fp_szero>
 6d4:	ca c0       	rjmp	.+404    	; 0x86a <__fp_nan>

000006d6 <__divsf3x>:
 6d6:	eb d0       	rcall	.+470    	; 0x8ae <__fp_split3>
 6d8:	98 f3       	brcs	.-26     	; 0x6c0 <__divsf3+0x4>

000006da <__divsf3_pse>:
 6da:	99 23       	and	r25, r25
 6dc:	c9 f3       	breq	.-14     	; 0x6d0 <__divsf3+0x14>
 6de:	55 23       	and	r21, r21
 6e0:	b1 f3       	breq	.-20     	; 0x6ce <__divsf3+0x12>
 6e2:	95 1b       	sub	r25, r21
 6e4:	55 0b       	sbc	r21, r21
 6e6:	bb 27       	eor	r27, r27
 6e8:	aa 27       	eor	r26, r26
 6ea:	62 17       	cp	r22, r18
 6ec:	73 07       	cpc	r23, r19
 6ee:	84 07       	cpc	r24, r20
 6f0:	38 f0       	brcs	.+14     	; 0x700 <__divsf3_pse+0x26>
 6f2:	9f 5f       	subi	r25, 0xFF	; 255
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	22 0f       	add	r18, r18
 6f8:	33 1f       	adc	r19, r19
 6fa:	44 1f       	adc	r20, r20
 6fc:	aa 1f       	adc	r26, r26
 6fe:	a9 f3       	breq	.-22     	; 0x6ea <__divsf3_pse+0x10>
 700:	33 d0       	rcall	.+102    	; 0x768 <__divsf3_pse+0x8e>
 702:	0e 2e       	mov	r0, r30
 704:	3a f0       	brmi	.+14     	; 0x714 <__divsf3_pse+0x3a>
 706:	e0 e8       	ldi	r30, 0x80	; 128
 708:	30 d0       	rcall	.+96     	; 0x76a <__divsf3_pse+0x90>
 70a:	91 50       	subi	r25, 0x01	; 1
 70c:	50 40       	sbci	r21, 0x00	; 0
 70e:	e6 95       	lsr	r30
 710:	00 1c       	adc	r0, r0
 712:	ca f7       	brpl	.-14     	; 0x706 <__divsf3_pse+0x2c>
 714:	29 d0       	rcall	.+82     	; 0x768 <__divsf3_pse+0x8e>
 716:	fe 2f       	mov	r31, r30
 718:	27 d0       	rcall	.+78     	; 0x768 <__divsf3_pse+0x8e>
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	bb 1f       	adc	r27, r27
 722:	26 17       	cp	r18, r22
 724:	37 07       	cpc	r19, r23
 726:	48 07       	cpc	r20, r24
 728:	ab 07       	cpc	r26, r27
 72a:	b0 e8       	ldi	r27, 0x80	; 128
 72c:	09 f0       	breq	.+2      	; 0x730 <__divsf3_pse+0x56>
 72e:	bb 0b       	sbc	r27, r27
 730:	80 2d       	mov	r24, r0
 732:	bf 01       	movw	r22, r30
 734:	ff 27       	eor	r31, r31
 736:	93 58       	subi	r25, 0x83	; 131
 738:	5f 4f       	sbci	r21, 0xFF	; 255
 73a:	2a f0       	brmi	.+10     	; 0x746 <__divsf3_pse+0x6c>
 73c:	9e 3f       	cpi	r25, 0xFE	; 254
 73e:	51 05       	cpc	r21, r1
 740:	68 f0       	brcs	.+26     	; 0x75c <__divsf3_pse+0x82>
 742:	8d c0       	rjmp	.+282    	; 0x85e <__fp_inf>
 744:	d7 c0       	rjmp	.+430    	; 0x8f4 <__fp_szero>
 746:	5f 3f       	cpi	r21, 0xFF	; 255
 748:	ec f3       	brlt	.-6      	; 0x744 <__divsf3_pse+0x6a>
 74a:	98 3e       	cpi	r25, 0xE8	; 232
 74c:	dc f3       	brlt	.-10     	; 0x744 <__divsf3_pse+0x6a>
 74e:	86 95       	lsr	r24
 750:	77 95       	ror	r23
 752:	67 95       	ror	r22
 754:	b7 95       	ror	r27
 756:	f7 95       	ror	r31
 758:	9f 5f       	subi	r25, 0xFF	; 255
 75a:	c9 f7       	brne	.-14     	; 0x74e <__divsf3_pse+0x74>
 75c:	88 0f       	add	r24, r24
 75e:	91 1d       	adc	r25, r1
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret
 768:	e1 e0       	ldi	r30, 0x01	; 1
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	bb 1f       	adc	r27, r27
 772:	62 17       	cp	r22, r18
 774:	73 07       	cpc	r23, r19
 776:	84 07       	cpc	r24, r20
 778:	ba 07       	cpc	r27, r26
 77a:	20 f0       	brcs	.+8      	; 0x784 <__divsf3_pse+0xaa>
 77c:	62 1b       	sub	r22, r18
 77e:	73 0b       	sbc	r23, r19
 780:	84 0b       	sbc	r24, r20
 782:	ba 0b       	sbc	r27, r26
 784:	ee 1f       	adc	r30, r30
 786:	88 f7       	brcc	.-30     	; 0x76a <__divsf3_pse+0x90>
 788:	e0 95       	com	r30
 78a:	08 95       	ret

0000078c <__fixunssfsi>:
 78c:	98 d0       	rcall	.+304    	; 0x8be <__fp_splitA>
 78e:	88 f0       	brcs	.+34     	; 0x7b2 <__fixunssfsi+0x26>
 790:	9f 57       	subi	r25, 0x7F	; 127
 792:	90 f0       	brcs	.+36     	; 0x7b8 <__fixunssfsi+0x2c>
 794:	b9 2f       	mov	r27, r25
 796:	99 27       	eor	r25, r25
 798:	b7 51       	subi	r27, 0x17	; 23
 79a:	a0 f0       	brcs	.+40     	; 0x7c4 <__fixunssfsi+0x38>
 79c:	d1 f0       	breq	.+52     	; 0x7d2 <__fixunssfsi+0x46>
 79e:	66 0f       	add	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	88 1f       	adc	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	1a f0       	brmi	.+6      	; 0x7ae <__fixunssfsi+0x22>
 7a8:	ba 95       	dec	r27
 7aa:	c9 f7       	brne	.-14     	; 0x79e <__fixunssfsi+0x12>
 7ac:	12 c0       	rjmp	.+36     	; 0x7d2 <__fixunssfsi+0x46>
 7ae:	b1 30       	cpi	r27, 0x01	; 1
 7b0:	81 f0       	breq	.+32     	; 0x7d2 <__fixunssfsi+0x46>
 7b2:	9f d0       	rcall	.+318    	; 0x8f2 <__fp_zero>
 7b4:	b1 e0       	ldi	r27, 0x01	; 1
 7b6:	08 95       	ret
 7b8:	9c c0       	rjmp	.+312    	; 0x8f2 <__fp_zero>
 7ba:	67 2f       	mov	r22, r23
 7bc:	78 2f       	mov	r23, r24
 7be:	88 27       	eor	r24, r24
 7c0:	b8 5f       	subi	r27, 0xF8	; 248
 7c2:	39 f0       	breq	.+14     	; 0x7d2 <__fixunssfsi+0x46>
 7c4:	b9 3f       	cpi	r27, 0xF9	; 249
 7c6:	cc f3       	brlt	.-14     	; 0x7ba <__fixunssfsi+0x2e>
 7c8:	86 95       	lsr	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	b3 95       	inc	r27
 7d0:	d9 f7       	brne	.-10     	; 0x7c8 <__fixunssfsi+0x3c>
 7d2:	3e f4       	brtc	.+14     	; 0x7e2 <__fixunssfsi+0x56>
 7d4:	90 95       	com	r25
 7d6:	80 95       	com	r24
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8f 4f       	sbci	r24, 0xFF	; 255
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	08 95       	ret

000007e4 <__floatunsisf>:
 7e4:	e8 94       	clt
 7e6:	09 c0       	rjmp	.+18     	; 0x7fa <__floatsisf+0x12>

000007e8 <__floatsisf>:
 7e8:	97 fb       	bst	r25, 7
 7ea:	3e f4       	brtc	.+14     	; 0x7fa <__floatsisf+0x12>
 7ec:	90 95       	com	r25
 7ee:	80 95       	com	r24
 7f0:	70 95       	com	r23
 7f2:	61 95       	neg	r22
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	99 23       	and	r25, r25
 7fc:	a9 f0       	breq	.+42     	; 0x828 <__floatsisf+0x40>
 7fe:	f9 2f       	mov	r31, r25
 800:	96 e9       	ldi	r25, 0x96	; 150
 802:	bb 27       	eor	r27, r27
 804:	93 95       	inc	r25
 806:	f6 95       	lsr	r31
 808:	87 95       	ror	r24
 80a:	77 95       	ror	r23
 80c:	67 95       	ror	r22
 80e:	b7 95       	ror	r27
 810:	f1 11       	cpse	r31, r1
 812:	f8 cf       	rjmp	.-16     	; 0x804 <__floatsisf+0x1c>
 814:	fa f4       	brpl	.+62     	; 0x854 <__floatsisf+0x6c>
 816:	bb 0f       	add	r27, r27
 818:	11 f4       	brne	.+4      	; 0x81e <__floatsisf+0x36>
 81a:	60 ff       	sbrs	r22, 0
 81c:	1b c0       	rjmp	.+54     	; 0x854 <__floatsisf+0x6c>
 81e:	6f 5f       	subi	r22, 0xFF	; 255
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	16 c0       	rjmp	.+44     	; 0x854 <__floatsisf+0x6c>
 828:	88 23       	and	r24, r24
 82a:	11 f0       	breq	.+4      	; 0x830 <__floatsisf+0x48>
 82c:	96 e9       	ldi	r25, 0x96	; 150
 82e:	11 c0       	rjmp	.+34     	; 0x852 <__floatsisf+0x6a>
 830:	77 23       	and	r23, r23
 832:	21 f0       	breq	.+8      	; 0x83c <__floatsisf+0x54>
 834:	9e e8       	ldi	r25, 0x8E	; 142
 836:	87 2f       	mov	r24, r23
 838:	76 2f       	mov	r23, r22
 83a:	05 c0       	rjmp	.+10     	; 0x846 <__floatsisf+0x5e>
 83c:	66 23       	and	r22, r22
 83e:	71 f0       	breq	.+28     	; 0x85c <__floatsisf+0x74>
 840:	96 e8       	ldi	r25, 0x86	; 134
 842:	86 2f       	mov	r24, r22
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	2a f0       	brmi	.+10     	; 0x854 <__floatsisf+0x6c>
 84a:	9a 95       	dec	r25
 84c:	66 0f       	add	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	88 1f       	adc	r24, r24
 852:	da f7       	brpl	.-10     	; 0x84a <__floatsisf+0x62>
 854:	88 0f       	add	r24, r24
 856:	96 95       	lsr	r25
 858:	87 95       	ror	r24
 85a:	97 f9       	bld	r25, 7
 85c:	08 95       	ret

0000085e <__fp_inf>:
 85e:	97 f9       	bld	r25, 7
 860:	9f 67       	ori	r25, 0x7F	; 127
 862:	80 e8       	ldi	r24, 0x80	; 128
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	08 95       	ret

0000086a <__fp_nan>:
 86a:	9f ef       	ldi	r25, 0xFF	; 255
 86c:	80 ec       	ldi	r24, 0xC0	; 192
 86e:	08 95       	ret

00000870 <__fp_pscA>:
 870:	00 24       	eor	r0, r0
 872:	0a 94       	dec	r0
 874:	16 16       	cp	r1, r22
 876:	17 06       	cpc	r1, r23
 878:	18 06       	cpc	r1, r24
 87a:	09 06       	cpc	r0, r25
 87c:	08 95       	ret

0000087e <__fp_pscB>:
 87e:	00 24       	eor	r0, r0
 880:	0a 94       	dec	r0
 882:	12 16       	cp	r1, r18
 884:	13 06       	cpc	r1, r19
 886:	14 06       	cpc	r1, r20
 888:	05 06       	cpc	r0, r21
 88a:	08 95       	ret

0000088c <__fp_round>:
 88c:	09 2e       	mov	r0, r25
 88e:	03 94       	inc	r0
 890:	00 0c       	add	r0, r0
 892:	11 f4       	brne	.+4      	; 0x898 <__fp_round+0xc>
 894:	88 23       	and	r24, r24
 896:	52 f0       	brmi	.+20     	; 0x8ac <__fp_round+0x20>
 898:	bb 0f       	add	r27, r27
 89a:	40 f4       	brcc	.+16     	; 0x8ac <__fp_round+0x20>
 89c:	bf 2b       	or	r27, r31
 89e:	11 f4       	brne	.+4      	; 0x8a4 <__fp_round+0x18>
 8a0:	60 ff       	sbrs	r22, 0
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <__fp_round+0x20>
 8a4:	6f 5f       	subi	r22, 0xFF	; 255
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__fp_split3>:
 8ae:	57 fd       	sbrc	r21, 7
 8b0:	90 58       	subi	r25, 0x80	; 128
 8b2:	44 0f       	add	r20, r20
 8b4:	55 1f       	adc	r21, r21
 8b6:	59 f0       	breq	.+22     	; 0x8ce <__fp_splitA+0x10>
 8b8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ba:	71 f0       	breq	.+28     	; 0x8d8 <__fp_splitA+0x1a>
 8bc:	47 95       	ror	r20

000008be <__fp_splitA>:
 8be:	88 0f       	add	r24, r24
 8c0:	97 fb       	bst	r25, 7
 8c2:	99 1f       	adc	r25, r25
 8c4:	61 f0       	breq	.+24     	; 0x8de <__fp_splitA+0x20>
 8c6:	9f 3f       	cpi	r25, 0xFF	; 255
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <__fp_splitA+0x2a>
 8ca:	87 95       	ror	r24
 8cc:	08 95       	ret
 8ce:	12 16       	cp	r1, r18
 8d0:	13 06       	cpc	r1, r19
 8d2:	14 06       	cpc	r1, r20
 8d4:	55 1f       	adc	r21, r21
 8d6:	f2 cf       	rjmp	.-28     	; 0x8bc <__fp_split3+0xe>
 8d8:	46 95       	lsr	r20
 8da:	f1 df       	rcall	.-30     	; 0x8be <__fp_splitA>
 8dc:	08 c0       	rjmp	.+16     	; 0x8ee <__fp_splitA+0x30>
 8de:	16 16       	cp	r1, r22
 8e0:	17 06       	cpc	r1, r23
 8e2:	18 06       	cpc	r1, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	f1 cf       	rjmp	.-30     	; 0x8ca <__fp_splitA+0xc>
 8e8:	86 95       	lsr	r24
 8ea:	71 05       	cpc	r23, r1
 8ec:	61 05       	cpc	r22, r1
 8ee:	08 94       	sec
 8f0:	08 95       	ret

000008f2 <__fp_zero>:
 8f2:	e8 94       	clt

000008f4 <__fp_szero>:
 8f4:	bb 27       	eor	r27, r27
 8f6:	66 27       	eor	r22, r22
 8f8:	77 27       	eor	r23, r23
 8fa:	cb 01       	movw	r24, r22
 8fc:	97 f9       	bld	r25, 7
 8fe:	08 95       	ret

00000900 <__udivmodhi4>:
 900:	aa 1b       	sub	r26, r26
 902:	bb 1b       	sub	r27, r27
 904:	51 e1       	ldi	r21, 0x11	; 17
 906:	07 c0       	rjmp	.+14     	; 0x916 <__udivmodhi4_ep>

00000908 <__udivmodhi4_loop>:
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	a6 17       	cp	r26, r22
 90e:	b7 07       	cpc	r27, r23
 910:	10 f0       	brcs	.+4      	; 0x916 <__udivmodhi4_ep>
 912:	a6 1b       	sub	r26, r22
 914:	b7 0b       	sbc	r27, r23

00000916 <__udivmodhi4_ep>:
 916:	88 1f       	adc	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	5a 95       	dec	r21
 91c:	a9 f7       	brne	.-22     	; 0x908 <__udivmodhi4_loop>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	bc 01       	movw	r22, r24
 924:	cd 01       	movw	r24, r26
 926:	08 95       	ret

00000928 <atoi>:
 928:	fc 01       	movw	r30, r24
 92a:	88 27       	eor	r24, r24
 92c:	99 27       	eor	r25, r25
 92e:	e8 94       	clt
 930:	21 91       	ld	r18, Z+
 932:	20 32       	cpi	r18, 0x20	; 32
 934:	e9 f3       	breq	.-6      	; 0x930 <atoi+0x8>
 936:	29 30       	cpi	r18, 0x09	; 9
 938:	10 f0       	brcs	.+4      	; 0x93e <atoi+0x16>
 93a:	2e 30       	cpi	r18, 0x0E	; 14
 93c:	c8 f3       	brcs	.-14     	; 0x930 <atoi+0x8>
 93e:	2b 32       	cpi	r18, 0x2B	; 43
 940:	39 f0       	breq	.+14     	; 0x950 <atoi+0x28>
 942:	2d 32       	cpi	r18, 0x2D	; 45
 944:	31 f4       	brne	.+12     	; 0x952 <atoi+0x2a>
 946:	68 94       	set
 948:	03 c0       	rjmp	.+6      	; 0x950 <atoi+0x28>
 94a:	15 d0       	rcall	.+42     	; 0x976 <__mulhi_const_10>
 94c:	82 0f       	add	r24, r18
 94e:	91 1d       	adc	r25, r1
 950:	21 91       	ld	r18, Z+
 952:	20 53       	subi	r18, 0x30	; 48
 954:	2a 30       	cpi	r18, 0x0A	; 10
 956:	c8 f3       	brcs	.-14     	; 0x94a <atoi+0x22>
 958:	1e f4       	brtc	.+6      	; 0x960 <atoi+0x38>
 95a:	90 95       	com	r25
 95c:	81 95       	neg	r24
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	08 95       	ret

00000962 <__itoa_ncheck>:
 962:	bb 27       	eor	r27, r27
 964:	4a 30       	cpi	r20, 0x0A	; 10
 966:	31 f4       	brne	.+12     	; 0x974 <__itoa_ncheck+0x12>
 968:	99 23       	and	r25, r25
 96a:	22 f4       	brpl	.+8      	; 0x974 <__itoa_ncheck+0x12>
 96c:	bd e2       	ldi	r27, 0x2D	; 45
 96e:	90 95       	com	r25
 970:	81 95       	neg	r24
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	09 c0       	rjmp	.+18     	; 0x988 <__utoa_common>

00000976 <__mulhi_const_10>:
 976:	7a e0       	ldi	r23, 0x0A	; 10
 978:	97 9f       	mul	r25, r23
 97a:	90 2d       	mov	r25, r0
 97c:	87 9f       	mul	r24, r23
 97e:	80 2d       	mov	r24, r0
 980:	91 0d       	add	r25, r1
 982:	11 24       	eor	r1, r1
 984:	08 95       	ret

00000986 <__utoa_ncheck>:
 986:	bb 27       	eor	r27, r27

00000988 <__utoa_common>:
 988:	fb 01       	movw	r30, r22
 98a:	55 27       	eor	r21, r21
 98c:	aa 27       	eor	r26, r26
 98e:	88 0f       	add	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	aa 1f       	adc	r26, r26
 994:	a4 17       	cp	r26, r20
 996:	10 f0       	brcs	.+4      	; 0x99c <__utoa_common+0x14>
 998:	a4 1b       	sub	r26, r20
 99a:	83 95       	inc	r24
 99c:	50 51       	subi	r21, 0x10	; 16
 99e:	b9 f7       	brne	.-18     	; 0x98e <__utoa_common+0x6>
 9a0:	a0 5d       	subi	r26, 0xD0	; 208
 9a2:	aa 33       	cpi	r26, 0x3A	; 58
 9a4:	08 f0       	brcs	.+2      	; 0x9a8 <__utoa_common+0x20>
 9a6:	a9 5d       	subi	r26, 0xD9	; 217
 9a8:	a1 93       	st	Z+, r26
 9aa:	00 97       	sbiw	r24, 0x00	; 0
 9ac:	79 f7       	brne	.-34     	; 0x98c <__utoa_common+0x4>
 9ae:	b1 11       	cpse	r27, r1
 9b0:	b1 93       	st	Z+, r27
 9b2:	11 92       	st	Z+, r1
 9b4:	cb 01       	movw	r24, r22
 9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <strrev>

000009b8 <strrev>:
 9b8:	dc 01       	movw	r26, r24
 9ba:	fc 01       	movw	r30, r24
 9bc:	67 2f       	mov	r22, r23
 9be:	71 91       	ld	r23, Z+
 9c0:	77 23       	and	r23, r23
 9c2:	e1 f7       	brne	.-8      	; 0x9bc <strrev+0x4>
 9c4:	32 97       	sbiw	r30, 0x02	; 2
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <strrev+0x18>
 9c8:	7c 91       	ld	r23, X
 9ca:	6d 93       	st	X+, r22
 9cc:	70 83       	st	Z, r23
 9ce:	62 91       	ld	r22, -Z
 9d0:	ae 17       	cp	r26, r30
 9d2:	bf 07       	cpc	r27, r31
 9d4:	c8 f3       	brcs	.-14     	; 0x9c8 <strrev+0x10>
 9d6:	08 95       	ret

000009d8 <_exit>:
 9d8:	f8 94       	cli

000009da <__stop_program>:
 9da:	ff cf       	rjmp	.-2      	; 0x9da <__stop_program>
